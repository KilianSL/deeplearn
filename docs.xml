<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NEA</name>
    </assembly>
    <members>
        <member name="T:NEA.NeuralNetwork.ActivationFunctions">
            <summary>
            Provides static functional implementations of neural network activation functions.
            </summary>
        </member>
        <member name="M:NEA.NeuralNetwork.ActivationFunctions.Sigmoid(NEA.Tensor.Tensor)">
             <summary>
             Applies the element-wise sigmoid function.
             </summary>
             <param name="x">The input tensor.</param>
             <returns>The input tensor, with the sigmoid function applied to each value.</returns>
            
        </member>
        <member name="M:NEA.NeuralNetwork.ActivationFunctions.Sigmoid(NEA.Tensor.Matrix)">
             <summary>
             Applies the element-wise sigmoid function.
             </summary>
             <param name="x">The input matrix.</param>
             <returns>The input matrix, with the sigmoid function applied to each value.</returns>
            
        </member>
        <member name="M:NEA.NeuralNetwork.ActivationFunctions.ReLU(NEA.Tensor.Tensor)">
             <summary>
             Applies the element-wise rectified linear unit function.
             </summary>
             <param name="x">The input tensor.</param>
             <returns>The input tensor, with the rectified linear unit function applied to each value.</returns>
            
        </member>
        <member name="M:NEA.NeuralNetwork.ActivationFunctions.ReLU(NEA.Tensor.Matrix)">
             <summary>
             Applies the element-wise rectified linear unit function.
             </summary>
             <param name="x">The input matrix.</param>
             <returns>The input matrix, with the rectified linear unit function applied to each value.</returns>
            
        </member>
        <member name="M:NEA.NeuralNetwork.ActivationFunctions.Tanh(NEA.Tensor.Tensor)">
             <summary>
             Applies the element-wise hyperbolic tangent function.
             </summary>
             <param name="x">The input tensor.</param>
             <returns>The input tensor, with the hyperbolic tangent function applied to each value.</returns>
            
        </member>
        <member name="M:NEA.NeuralNetwork.ActivationFunctions.Tanh(NEA.Tensor.Matrix)">
             <summary>
             Applies the element-wise hyperbolic tangent function.
             </summary>
             <param name="x">The input matrix.</param>
             <returns>The input matrix, with the hyperbolic tangent function applied to each value.</returns>
            
        </member>
        <member name="M:NEA.NeuralNetwork.ActivationFunctions.Softmax(NEA.Tensor.Tensor)">
             <summary>
             Applies the Softmax function to each batch of an n-dimensional input tensor rescaling them so that the elements of the n-dimensional output tensor lie in the range [0,1] and sum to 1.
             </summary>
             <param name="x">The input tensor.</param>
             <returns>The input tensor, with the softmax function applied to each batch.</returns>
            
        </member>
        <member name="M:NEA.NeuralNetwork.ActivationFunctions.Softmax(NEA.Tensor.Matrix)">
            <summary>
            Applies the Softmax function to an input matrix, rescaling each element so that the elements of the matrix lie in the range [0,1] and sum to 1.
            </summary>
            <param name="x">The input matrix.</param>
            <returns>The input matrix, with the softmax function applied.</returns>
        </member>
        <member name="T:NEA.NeuralNetwork.IModule">
            <summary>
            Interface implemented by all neural network modules.
            </summary>
        </member>
        <member name="M:NEA.NeuralNetwork.IModule.Forward(NEA.Tensor.Tensor)">
            <summary>
            The function to be called on a forward pass.
            </summary>
            <param name="input">The input sample.</param>
            <returns>The result of the forward pass on the input sample.</returns>
        </member>
        <member name="T:NEA.NeuralNetwork.Layers.Dropout">
            <summary>
            During training, randomly zeroes some of the elements of the input tensor with probability p using samples from a uniform distribution.
            </summary>
        </member>
        <member name="M:NEA.NeuralNetwork.Layers.Dropout.#ctor(System.Int32,System.Single)">
            <summary>
            Creates a new dropout layer with the specified input size and dropout probability p.
            </summary>
            <param name="InputSize">The size of the input sample.</param>
            <param name="p">The probability of a value being reduced to 0.</param>
        </member>
        <member name="M:NEA.NeuralNetwork.Layers.Dropout.Forward(NEA.Tensor.Tensor)">
            <summary>
            During training, randomly zeroes some of the elements of the input tensor with probability p using samples from a uniform distribution.
            </summary>
        </member>
        <member name="T:NEA.NeuralNetwork.Layers.Identity">
            <summary>
            A placeholder identity operator.
            </summary>
        </member>
        <member name="M:NEA.NeuralNetwork.Layers.Identity.#ctor(System.Int32)">
            <summary>
            Creates a new identity layer.
            </summary>
            <param name="InputSize">The size of the input sample. This will also be the size of the output sample.</param>
        </member>
        <member name="M:NEA.NeuralNetwork.Layers.Identity.Forward(NEA.Tensor.Tensor)">
            <summary>
            A placeholder identity operator.
            </summary>
            <param name="x">The input sample.</param>
            <returns>The input sample.</returns>
        </member>
        <member name="T:NEA.NeuralNetwork.Layers.Layer">
            <summary>
            Base class from which all layers are derived.
            </summary>
        </member>
        <member name="P:NEA.NeuralNetwork.Layers.Layer.InputSize">
            <summary>
            The size of each input sample
            </summary>
        </member>
        <member name="P:NEA.NeuralNetwork.Layers.Layer.OutputSize">
            <summary>
            The size of each output sample
            </summary>
        </member>
        <member name="M:NEA.NeuralNetwork.Layers.Layer.Forward(NEA.Tensor.Tensor)">
            <summary>
            Method to be called during forward-propagation.
            </summary>
            <param name="x">The input sample</param>
            <returns>Tensor of this layers output sample.</returns>
        </member>
        <member name="T:NEA.NeuralNetwork.Layers.Linear">
            <summary>
            Applies a linear transformation to the incoming data.
            </summary>
        </member>
        <member name="M:NEA.NeuralNetwork.Layers.Linear.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new linear layer.
            </summary>
            <param name="InputSize">The size of the input sample.</param>
            <param name="OutputSize">This size of the output sample.</param>
        </member>
        <member name="M:NEA.NeuralNetwork.Layers.Linear.Forward(NEA.Tensor.Tensor)">
            <summary>
            Applies a linear transformation to the incoming data.
            </summary>
            <param name="x">The input data.</param>
            <returns>The transformed input data.</returns>
        </member>
        <member name="M:NEA.NeuralNetwork.Layers.Linear.ResetParameters">
            <summary>
            Randomly initialises the weights for the layer. Biases are initialised to 0.
            </summary>
        </member>
        <member name="T:NEA.NeuralNetwork.LossFunctions">
            <summary>
            Provides static functional implementations of statistical loss/error functions.
            </summary>
        </member>
        <member name="M:NEA.NeuralNetwork.LossFunctions.MSELoss(NEA.Tensor.Tensor,NEA.Tensor.Tensor)">
            <summary>
            Measures the mean squared error (squared L2 norm) between each element of each batch in the input x and target y.
            </summary>
            <param name="x">The input.</param>
            <param name="y">The target.</param>
            <returns>An array showing the the mean squared error (squared L2 norm) of each batch of the input x and target y.</returns>
        </member>
        <member name="M:NEA.NeuralNetwork.LossFunctions.MSELoss(NEA.Tensor.Matrix,NEA.Tensor.Matrix)">
            <summary>
            Measures the mean squared error (squared L2 norm) between each element in the input x and target y.
            </summary>
            <param name="x">The input.</param>
            <param name="y">The target.</param>
            <returns>A float showing the the mean squared error (squared L2 norm) between each element of the input x and target y.</returns>
        </member>
        <member name="M:NEA.NeuralNetwork.LossFunctions.CrossEntropyLoss(NEA.Tensor.Tensor,NEA.Tensor.Tensor)">
            <summary>
            Measures the cross entropy loss between each element in the input x and target y.
            </summary>
            <param name="x">The input, containing the raw, unnormalized scores for each class.</param>
            <param name="y">The target, a batch of one-hot vectors.</param>
            <returns>A float array showing the cross entropy loss of each batch of the input x and target y.</returns>
        </member>
        <member name="M:NEA.NeuralNetwork.LossFunctions.CrossEntropyLoss(NEA.Tensor.Matrix,NEA.Tensor.Matrix)">
            <summary>
            Measures the cross entropy loss between each element in the input x and target y.
            </summary>
            <param name="x">The input, containing the raw, unnormalized scores for each class.</param>
            <param name="y">The target, a one-hot vector.</param>
            <returns>A float showing the cross entropy loss of the input x and target y.</returns>
        </member>
        <member name="T:NEA.Tensor.Matrix">
            <summary>
            A class representing a matrix. Uses a single-precision Float32 data type.
            </summary>
        </member>
        <member name="P:NEA.Tensor.Matrix.Shape">
            <summary>
            The dimensions of the matrix, in order [rows,columns].
            </summary>
        </member>
        <member name="M:NEA.Tensor.Matrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Initialises an empty matrix with the specified number of rows and columns.
            </summary>
            /// <param name="rows">The number of rows.</param>
            <param name="columns">The number of columns.</param>
        </member>
        <member name="M:NEA.Tensor.Matrix.#ctor(System.Single[0:,0:])">
            <summary>
            Initialises a matrix with the values in the specified array
            </summary>
            <param name="data">Array of values to populate the matrix</param>
        </member>
        <member name="M:NEA.Tensor.Matrix.ZeroMatrix(System.Int32,System.Int32)">
            <summary>
            Creates a matrix of the specified dimensions, with all values initialised to 0.
            </summary>
            <returns>A new matrix initialised with all values at 0.</returns>
        </member>
        <member name="M:NEA.Tensor.Matrix.GaussianMatrix(System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Creates a matrix of the specified dimensions populated with values drawn from a random Gaussian distribution.
            </summary>
            <param name="rows">The number of rows in the matrix.</param>
            <param name="columns">The number of columns in the matrix.</param>
            <param name="mean">The mean of the distribution. Default 0</param>
            <param name="stdDev">The standard deviation of the distribution. Default 1</param>
            <returns>A new matrix intialised with the specified parameters.</returns>
        </member>
        <member name="P:NEA.Tensor.Matrix.Item(System.Int32)">
            <summary>
            Gets a single value from the first column of the matrix. Only works with column matricies.
            </summary>
            <param name="idx">The row index of the required item.</param>
            <returns>The float at [idx,0].</returns>
        </member>
        <member name="P:NEA.Tensor.Matrix.Item(System.Int32,System.Int32)">
            <summary>
            Specifies a single value at the desired row and column indices. Allows get and set operations.
            </summary>
            <param name="row">The row index.</param>
            <param name="col">The column index.</param>
            <returns>The float at [row,col].</returns>
        </member>
        <member name="M:NEA.Tensor.Matrix.GetEnumerator">
            <summary>
            Gets an enumerable collection from this matrix.
            </summary>
            <returns>An IEnumerator representing the matrix.</returns>
        </member>
        <member name="M:NEA.Tensor.Matrix.Equals(System.Object)">
            <summary>
            Checks two objects are equal.
            </summary>
            <param name="obj">The object to compare this matrix to.</param>
            <returns>A boolean equality value.</returns>
        </member>
        <member name="M:NEA.Tensor.Matrix.GetHashCode">
            <summary>
            Gets the hash value for this matrix.
            </summary>
            <returns>The hash value of this matrix.</returns>
        </member>
        <member name="M:NEA.Tensor.Matrix.Add(NEA.Tensor.Matrix)">
            <summary>
            Adds matrix A to this matrix.
            </summary>
        </member>
        <member name="M:NEA.Tensor.Matrix.Hadamard(NEA.Tensor.Matrix)">
            <summary>
            Performs the Hadamard (elementwise) product between this matrix and matrix A.
            </summary>
        </member>
        <member name="M:NEA.Tensor.Matrix.Dot(NEA.Tensor.Matrix)">
            <summary>
            Returns the dot product of this matrix and matrix A.
            </summary>
            <returns>The dot product.</returns>
        </member>
        <member name="M:NEA.Tensor.Matrix.Transform(NEA.Tensor.Matrix)">
            <summary>
            Transforms this matrix by matrix A.
            </summary>
        </member>
        <member name="M:NEA.Tensor.Matrix.Reshape(System.Int32,System.Int32)">
            <summary>
            Reshapes the matrix to fit the specified dimensions.
            </summary>
        </member>
        <member name="M:NEA.Tensor.Matrix.Transpose">
            <summary>
            Transposes the matrix.
            </summary>
        </member>
        <member name="M:NEA.Tensor.Matrix.ToArray">
            <summary>
            Returns a new float array storing the data from the matrix.
            </summary>
            <returns>A new float array storing the data from the matrix.</returns>
        </member>
        <member name="M:NEA.Tensor.Matrix.ToString">
            <summary>
            Generates a string representation of this matrix.
            </summary>
            <returns>A string representing this matrix.</returns>
        </member>
        <member name="M:NEA.Tensor.MatrixUtils.RandomGaussian(System.Single,System.Single)">
            <summary>
            Draws variables from a random Gaussian distribution.
            </summary>
            <param name="mean">The mean of the distribution.</param>
            <param name="stdDev">The standard deviation of the distribution.</param>
            <returns>An array of 2 random variables drawn from the distribution.</returns>
        </member>
        <member name="T:NEA.Tensor.Tensor">
            <summary>
            A class representing a batch of matricies.
            </summary>
        </member>
        <member name="P:NEA.Tensor.Tensor.Shape">
            <summary>
            The shape of the tensor in order [batches, matrix_rows, matrix_columns]
            </summary>
        </member>
        <member name="M:NEA.Tensor.Tensor.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initialises an empty tensor with the specified number of rows, columns and batches.
            </summary>
            <param name="batches">The number of batches.</param>
            <param name="rows">The number of rows.</param>
            <param name="columns">The number of columns.</param>
        </member>
        <member name="P:NEA.Tensor.Tensor.Item(System.Int32)">
            <summary>
            Gets the batch at the specified index.
            </summary>
            <param name="idx">The index of the batch.</param>
            <returns>A matrix representing the batch.</returns>
        </member>
        <member name="P:NEA.Tensor.Tensor.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the float at the specified index.
            </summary>
            <param name="batch">The batch index.</param>
            <param name="row">The row index.</param>
            <param name="col">The column index.</param>
            <returns>The float value at the specified index.</returns>
        </member>
        <member name="M:NEA.Tensor.Tensor.GetItem(System.Int32)">
            <summary>
            Gets the batch at the specified index.
            </summary>
            <param name="idx">The index in the tensor.</param>
            <returns>A matrix representing the batch.</returns>
            <remarks>Deprecated code, will soon be removed.</remarks>
        </member>
        <member name="M:NEA.Tensor.Tensor.SetItem(System.Int32,NEA.Tensor.Matrix)">
            <summary>
            Sets the batch at the specified index.
            </summary>
            <param name="idx">The index of the batch.</param>
            <param name="m">The matrix to set.</param>
            <remarks>Deprecated code, will soon be removed.</remarks>
        </member>
        <member name="M:NEA.Tensor.Tensor.GetHashCode">
            <summary>
            Gets the hash value for this tensor.
            </summary>
            <returns>The hash value of this tensor.</returns>
        </member>
        <member name="M:NEA.Tensor.Tensor.Equals(System.Object)">
            <summary>
            Checks two objects are equal.
            </summary>
            <param name="obj">The object to compare this tensor to.</param>
            <returns>A boolean equality value.</returns>
        </member>
        <member name="M:NEA.Tensor.Tensor.ToString">
            <summary>
            Generates a string representation of this tensor.
            </summary>
            <returns>A string representing this tensor.</returns>
        </member>
        <member name="M:NEA.Tensor.Tensor.Add(NEA.Tensor.Tensor)">
            <summary>
            Adds Tensor A to this Tensor.
            </summary>
        </member>
        <member name="M:NEA.Tensor.Tensor.Add(NEA.Tensor.Matrix)">
            <summary>
            Adds Matrix A to this Tensor.
            </summary>
        </member>
        <member name="M:NEA.Tensor.Tensor.Hadamard(NEA.Tensor.Tensor)">
            <summary>
            Performs a Hadamard (elementwise) multiplication on this Tensor.
            </summary>
        </member>
        <member name="M:NEA.Tensor.Tensor.Hadamard(NEA.Tensor.Matrix)">
            <summary>
            Performs a Hadamard (elementwise) multiplication on this Tensor.
            </summary>
        </member>
        <member name="M:NEA.Tensor.Tensor.Dot(NEA.Tensor.Tensor)">
            <summary>
            Calculates the dot product between the matricies contained in two tensors.
            </summary>
            <returns>An array of matrix dot products</returns>
        </member>
        <member name="M:NEA.Tensor.Tensor.Dot(NEA.Tensor.Matrix)">
            <summary>
            Calculates the dot product between the matricies contained in this tensor and matrix A.
            </summary>
            <returns>An array of matrix dot products.</returns>
        </member>
        <member name="M:NEA.Tensor.Tensor.Transform(NEA.Tensor.Tensor)">
            <summary>
            Performs a matrix transformation on the matricies contained in this tensor.
            </summary>
        </member>
        <member name="M:NEA.Tensor.Tensor.Transform(NEA.Tensor.Matrix)">
            <summary>
            Performs a matrix transformation on the matricies contained in this tensor.
            </summary>
        </member>
        <member name="M:NEA.Tensor.Tensor.Reshape(System.Int32,System.Int32)">
            <summary>
            Reshapes every matrix in the Tensor to the specified dimensions.
            </summary>
        </member>
        <member name="M:NEA.Tensor.Tensor.Transpose">
            <summary>
            Transposes every matrix in the Tensor.
            </summary>
        </member>
        <member name="M:NEA.Tensor.Tensor.ToArray">
            <summary>
            Returns the tensor as an array of 2d float arrays.
            </summary>
        </member>
        <member name="T:NEA.Utils.Data.Batch">
            <summary>
            Stores the input and output tensors for a single batch of data.
            </summary>
        </member>
        <member name="M:NEA.Utils.Data.Batch.#ctor(NEA.Tensor.Tensor,NEA.Tensor.Tensor)">
            <summary>
            Creates a new Batch.
            </summary>
            <param name="input">The input tensor.</param>
            <param name="output">The corresponding output tensor.</param>
        </member>
        <member name="F:NEA.Utils.Data.Batch.input">
            <summary>
            A tensor of input samples.
            </summary>
        </member>
        <member name="F:NEA.Utils.Data.Batch.output">
            <summary>
            A tensor of output samples.
            </summary>
        </member>
        <member name="P:NEA.Utils.Data.Batch.BatchSize">
            <summary>
            The amount of items in this batch.
            </summary>
        </member>
        <member name="T:NEA.Utils.Data.DataLoader">
            <summary>
            Data loader. Combines a dataset and a sampler, and provides an iterable over the given dataset.
            </summary>
        </member>
        <member name="F:NEA.Utils.Data.DataLoader.TrainSet">
            <summary>
            The set of training data.
            </summary>
        </member>
        <member name="F:NEA.Utils.Data.DataLoader.TestSet">
            <summary>
            The set of test data.
            </summary>
        </member>
        <member name="F:NEA.Utils.Data.DataLoader.BatchSize">
            <summary>
            The number of samples in each batch.
            </summary>
        </member>
        <member name="M:NEA.Utils.Data.DataLoader.#ctor(NEA.Utils.Data.DataSet,System.Int32,System.Int32[],System.Boolean,System.Int32,System.Boolean,System.Boolean,System.Single)">
            <summary>
            Initialises a new DataLoader object with the specified parameters.
            Will always clean the dataset, regardless of whether or not it has already been cleaned.
            </summary>
            <param name="dataset">The cleaned dataset to load data from.</param>
            <param name="batchSize">The size that each batch of data should take.</param>
            <param name="targetVariable">The column index(es) of the target variable(s).</param>
            <param name="oneHotTarget">Whether the target should be a one-hot vector. Default false</param>
            <param name="nClasses">The total number of classes for a one-hot vector. Default 0.</param>
            <param name="shuffle">Whether the dataset should be shuffled. Default true.</param>
            <param name="split">Whether the dataset should be split into train and test. Default true.</param>
            <param name="trainTestSplit">The proportion of the dataset that should be used as training data. Default 0.7.</param>
        </member>
        <member name="T:NEA.Utils.Data.DataSet">
            <summary>
            A class representing a dataset, as well as allowing basic data interactions.
            </summary>
        </member>
        <member name="P:NEA.Utils.Data.DataSet.Count">
            <summary>
            The number of entries in the dataset
            </summary>
        </member>
        <member name="P:NEA.Utils.Data.DataSet.Features">
            <summary>
            The number of features in the dataset
            </summary>
        </member>
        <member name="M:NEA.Utils.Data.DataSet.#ctor">
            <summary>
            Creates a new empty instance of the dataset class
            </summary>
        </member>
        <member name="M:NEA.Utils.Data.DataSet.#ctor(System.String,System.Boolean,System.Char)">
            <summary>
            Creates a new instance of the dataset, populating it with data from the specified path.
            </summary>
            <param name="path">The path of the target dataset. Should specify a *.csv file.</param>
            <param name="dataAnnotations">Whether the target file has data annotations in the first line. Default false.</param>
            <param name="delimiter">The character used to separate fields on each row of the file. Default comma.</param>
        </member>
        <member name="M:NEA.Utils.Data.DataSet.#ctor(System.Nullable{System.Single}[][])">
            <summary>
            Creates a dataset from a pre-populated nullable float array
            </summary>
            <param name="data">The data to populate the dataset with</param>
        </member>
        <member name="P:NEA.Utils.Data.DataSet.Item(System.Int32,System.Int32)">
            <summary>
            Specifies a value at the specified row and column index.
            </summary>
            <param name="row">The row index.</param>
            <param name="column">The column index.</param>
            <returns>The nullable float at the specified index.</returns>
        </member>
        <member name="P:NEA.Utils.Data.DataSet.Item(System.Int32)">
            <summary>
            Specifies a row at the specified index.
            </summary>
            <param name="index">The row index.</param>
            <returns>The array of nullable floats at the specified index.</returns>
        </member>
        <member name="M:NEA.Utils.Data.DataSet.LoadData(System.String,System.Boolean,System.Char)">
            <summary>
            Loads data from the file at the specified path.
            </summary>
            <param name="path">The path of the target dataset. Should specify a *.csv file.</param>
            <param name="dataAnnotations">Whether the target file has data annotations in the first line. Default false.</param>
            <param name="delimiter">The character used to separate fields on each row of the file. Default comma.</param>
        </member>
        <member name="M:NEA.Utils.Data.DataSet.Clean">
            <summary>
            Removes all elements with invalid entries from the dataset. Return the amount of items removed.
            </summary>
        </member>
        <member name="M:NEA.Utils.Data.DataSet.Shuffle">
            <summary>
            Performs a Fisher-Yates shuffle on the dataset
            </summary>
        </member>
        <member name="M:NEA.Utils.Data.DataSet.RandomSample(System.Int32)">
            <summary>
            Selects a specified number of items from the dataset.
            </summary>
            <param name="nItems">The number of items to select.</param>
            <returns>A random sample of items from the dataset.</returns>
        </member>
        <member name="M:NEA.Utils.Data.DataSet.RemoveFeature(System.Int32)">
            <summary>
            Removes the feature at the specified column index from every element in the dataset
            </summary>
            <param name="index">The column index of the feature to remove</param>
        </member>
        <member name="M:NEA.Utils.Data.DataSet.RemoveElementAt(System.Int32)">
            <summary>
            Removes a single item from the dataset at the specified index.
            </summary>
            <param name="index">The row index of the item to be removed.</param>
        </member>
        <member name="M:NEA.Utils.Data.DataSet.TrainTestSplit(System.Single)">
            <summary>
            Splits the dataset into a training dataset and a test dataset.
            </summary>
            <param name="trainTestSplit">The proportion of the dataset which should be test data</param>
            <returns>A tuple of (trainingdata, testdata)</returns>
        </member>
        <member name="M:NEA.Utils.Data.DataSet.ToArray">
            <summary>
            Returns the contents of the dataset as a nullable float array.
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
